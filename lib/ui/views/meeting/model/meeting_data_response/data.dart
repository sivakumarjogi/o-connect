import 'package:equatable/equatable.dart';
import 'package:json_annotation/json_annotation.dart';

part 'data.g.dart';

@JsonSerializable()
class MeetingData extends Equatable {
  @JsonKey(name: 'meeting_name')
  final String? meetingName;
  @JsonKey(name: 'meeting_password')
  final String? meetingPassword;
  @JsonKey(name: 'room_type')
  final String? roomType;
  @JsonKey(name: 'meeting_type')
  final String? meetingType;
  @JsonKey(name: 'meeting_date')
  final DateTime? meetingDate;
  final String? timezone;
  final String? duration;
  @JsonKey(name: 'meeting_agenda')
  final String? meetingAgenda;
  @JsonKey(name: 'is_auto_id')
  final String? isAutoId;
  @JsonKey(name: 'auto_generated_id')
  final String? autoGeneratedId;
  @JsonKey(name: 'is_all_mute')
  final int? isAllMute;
  @JsonKey(name: 'allow_to_join')
  final int? allowToJoin;
  @JsonKey(name: 'record_to_local')
  final int? recordToLocal;
  @JsonKey(name: 'allow_country')
  final int? allowCountry;
  final String? country;
  @JsonKey(name: 'room_category')
  final String? roomCategory;
  @JsonKey(name: 'user_id')
  final int? userId;
  @JsonKey(name: 'end_date')
  final DateTime? endDate;
  @JsonKey(name: 'is_event_reminder')
  final int? isEventReminder;
  @JsonKey(name: 'reminder_time')
  final String? reminderTime;
  @JsonKey(name: 'is_auto_recording')
  final int? isAutoRecording;
  @JsonKey(name: 'exit_url')
  final String? exitUrl;
  @JsonKey(name: 'cancel_reason')
  final dynamic cancelReason;
  @JsonKey(name: 'is_active')
  final int? isActive;
  @JsonKey(name: 'is_started')
  final int? isStarted;
  final String? username;
  @JsonKey(name: 'user_email')
  final String? userEmail;
  final String? userPlan;
  @JsonKey(name: 'updated_on')
  final DateTime? updatedOn;
  @JsonKey(name: 'is_meeting_locked')
  final bool? isMeetingLocked;
  @JsonKey(name: 'host_key')
  final String? hostKey;
  @JsonKey(name: 'participant_key')
  final String? participantKey;
  @JsonKey(name: 'guest_key')
  final String? guestKey;
  @JsonKey(name: 'created_on')
  final DateTime? createdOn;
  @JsonKey(name: '_id')
  final String? id;
  @JsonKey(name: 'participant_custom')
  final String? participantCustom;
  @JsonKey(name: 'host_custom')
  final String? hostCustom;
  @JsonKey(name: 'guest_custom')
  final String? guestCustom;
  final List<dynamic>? emails;
  final List<dynamic>? contacts;
  final List<dynamic>? groups;
  final bool? isStartedBefore;
  final bool? isEventExpired;
  final String? token;

  const MeetingData({
    this.meetingName,
    this.meetingPassword,
    this.roomType,
    this.meetingType,
    this.meetingDate,
    this.timezone,
    this.duration,
    this.meetingAgenda,
    this.isAutoId,
    this.autoGeneratedId,
    this.isAllMute,
    this.allowToJoin,
    this.recordToLocal,
    this.allowCountry,
    this.country,
    this.roomCategory,
    this.userId,
    this.endDate,
    this.isEventReminder,
    this.reminderTime,
    this.isAutoRecording,
    this.exitUrl,
    this.cancelReason,
    this.isActive,
    this.isStarted,
    this.username,
    this.userEmail,
    this.userPlan,
    this.updatedOn,
    this.isMeetingLocked,
    this.hostKey,
    this.participantKey,
    this.guestKey,
    this.createdOn,
    this.id,
    this.participantCustom,
    this.hostCustom,
    this.guestCustom,
    this.emails,
    this.contacts,
    this.groups,
    this.isStartedBefore,
    this.isEventExpired,
    this.token,
  });

  factory MeetingData.fromJson(Map<String, dynamic> json) => _$MeetingDataFromJson(json);

  Map<String, dynamic> toJson() => _$MeetingDataToJson(this);

  MeetingData copyWith({
    String? meetingName,
    String? meetingPassword,
    String? roomType,
    String? meetingType,
    DateTime? meetingDate,
    String? timezone,
    String? duration,
    String? meetingAgenda,
    String? isAutoId,
    String? autoGeneratedId,
    int? isAllMute,
    int? allowToJoin,
    int? recordToLocal,
    int? allowCountry,
    String? country,
    String? roomCategory,
    int? userId,
    DateTime? endDate,
    int? isEventReminder,
    String? reminderTime,
    int? isAutoRecording,
    String? exitUrl,
    dynamic cancelReason,
    int? isActive,
    int? isStarted,
    String? username,
    String? userEmail,
    String? userPlan,
    DateTime? updatedOn,
    bool? isMeetingLocked,
    String? hostKey,
    String? participantKey,
    String? guestKey,
    DateTime? createdOn,
    String? id,
    String? participantCustom,
    String? hostCustom,
    String? guestCustom,
    List<dynamic>? emails,
    List<dynamic>? contacts,
    List<dynamic>? groups,
    bool? isStartedBefore,
    bool? isEventExpired,
    String? token,
  }) {
    return MeetingData(
      meetingName: meetingName ?? this.meetingName,
      meetingPassword: meetingPassword ?? this.meetingPassword,
      roomType: roomType ?? this.roomType,
      meetingType: meetingType ?? this.meetingType,
      meetingDate: meetingDate ?? this.meetingDate,
      timezone: timezone ?? this.timezone,
      duration: duration ?? this.duration,
      meetingAgenda: meetingAgenda ?? this.meetingAgenda,
      isAutoId: isAutoId ?? this.isAutoId,
      autoGeneratedId: autoGeneratedId ?? this.autoGeneratedId,
      isAllMute: isAllMute ?? this.isAllMute,
      allowToJoin: allowToJoin ?? this.allowToJoin,
      recordToLocal: recordToLocal ?? this.recordToLocal,
      allowCountry: allowCountry ?? this.allowCountry,
      country: country ?? this.country,
      roomCategory: roomCategory ?? this.roomCategory,
      userId: userId ?? this.userId,
      endDate: endDate ?? this.endDate,
      isEventReminder: isEventReminder ?? this.isEventReminder,
      reminderTime: reminderTime ?? this.reminderTime,
      isAutoRecording: isAutoRecording ?? this.isAutoRecording,
      exitUrl: exitUrl ?? this.exitUrl,
      cancelReason: cancelReason ?? this.cancelReason,
      isActive: isActive ?? this.isActive,
      isStarted: isStarted ?? this.isStarted,
      username: username ?? this.username,
      userEmail: userEmail ?? this.userEmail,
      userPlan: userPlan ?? this.userPlan,
      updatedOn: updatedOn ?? this.updatedOn,
      isMeetingLocked: isMeetingLocked ?? this.isMeetingLocked,
      hostKey: hostKey ?? this.hostKey,
      participantKey: participantKey ?? this.participantKey,
      guestKey: guestKey ?? this.guestKey,
      createdOn: createdOn ?? this.createdOn,
      id: id ?? this.id,
      participantCustom: participantCustom ?? this.participantCustom,
      hostCustom: hostCustom ?? this.hostCustom,
      guestCustom: guestCustom ?? this.guestCustom,
      emails: emails ?? this.emails,
      contacts: contacts ?? this.contacts,
      groups: groups ?? this.groups,
      isStartedBefore: isStartedBefore ?? this.isStartedBefore,
      isEventExpired: isEventExpired ?? this.isEventExpired,
      token: token ?? this.token,
    );
  }

  @override
  List<Object?> get props {
    return [
      meetingName,
      meetingPassword,
      roomType,
      meetingType,
      meetingDate,
      timezone,
      duration,
      meetingAgenda,
      isAutoId,
      autoGeneratedId,
      isAllMute,
      allowToJoin,
      recordToLocal,
      allowCountry,
      country,
      roomCategory,
      userId,
      endDate,
      isEventReminder,
      reminderTime,
      isAutoRecording,
      exitUrl,
      cancelReason,
      isActive,
      isStarted,
      username,
      userEmail,
      userPlan,
      updatedOn,
      isMeetingLocked,
      hostKey,
      participantKey,
      guestKey,
      createdOn,
      id,
      participantCustom,
      hostCustom,
      guestCustom,
      emails,
      contacts,
      groups,
      isStartedBefore,
      isEventExpired,
      token,
    ];
  }
}
